buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath "com.github.ivankohut:git-branch-checks:0.0.1"
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.ajoberstar.grgit' version '4.0.2'
    id 'checkstyle'
    id 'com.appmattus.markdown' version '0.6.0'
    id 'groovy'
    id 'codenarc'
    id 'nebula.lint' version '16.9.1'
    id 'com.github.spotbugs' version '4.5.0'
    id 'pmd'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    id 'at.zierler.yamlvalidator' version '1.5.0'
}

apply plugin: 'com.github.ivankohut.git-branch-checks'

ext {
    javaVersion = JavaVersion.VERSION_11
    junitVersion = '5.6.2'
    checkstyleVersion = '8.35'
    codenarcVersion = '1.6.1'
    spotbugsVersion = '4.1.2'
    pmdVersion = '6.26.0'
    jacocoVersion = '0.8.5'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation 'org.assertj:assertj-core:3.17.1'
}

gitBranchChecks {
    branchPattern = ~/(master)|(feature\/#\d+\/[a-z0-9\-]+)/
    messagePattern = ~/#\d+ [A-Z0-9]\S* \S.*/
}

check {
    dependsOn checkBranchName, checkCommitMessages, checkNoMergeCommits
}

jar {
    manifest {
        attributes(
                'Main-Class': 'sk.ivankohut.quantifa.Application'
        )
    }
}

jacoco {
    toolVersion jacocoVersion
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled false
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion checkstyleVersion
}

task checkstyleRoot(type: Checkstyle) {
    source = rootDir
    classpath = files()
    configFile = file('config/checkstyle/checkstyle-root.xml')
    exclude '**/build/**', '.idea/**', '**/.gradle/**', 'gradle/**', 'gradlew', 'gradlew.bat', '**/*.md'
}

check {
    dependsOn checkstyleRoot
}

codenarc {
    toolVersion codenarcVersion
    codenarcMain.enabled = false
    codenarcTest.enabled = false
}

task codenarcGradle(type: CodeNarc) {
    compilationClasspath += buildscript.configurations.classpath
    configFile = file('config/codenarc/codenarc-gradle.groovy')
    source = rootDir
    include '*.gradle', 'config/codenarc/*.groovy'
    ignoreFailures false
    maxPriority1Violations 0
    maxPriority2Violations 0
    maxPriority3Violations 0
}

check {
    dependsOn codenarcGradle
}

gradleLint {
    alwaysRun = false
    criticalRules = ['all-dependency']
}

check {
    dependsOn criticalLintGradle
}

spotbugs {
    toolVersion = spotbugsVersion
    ignoreFailures = false
    effort = 'max'
}

pmd {
    toolVersion pmdVersion
    ignoreFailures = false
    consoleOutput = true
}

tasks.withType(Pmd) {
    include '**/*.java'
}

pmdTest {
    ruleSets = []
    ruleSetFiles = files('config/pmd/test-ruleset.xml')
}

pmdMain {
    ruleSets = []
    ruleSetFiles = files('config/pmd/main-ruleset.xml')
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'ivankohut_quantifa'
        property 'sonar.qualitygate.wait', true
        property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks['sonarqube'].dependsOn test

yamlValidator {
    searchPaths = ['.travis.yml']
}

gitBranchChecks {
    branchPattern = ~/featsr/
    messagePattern = ~/aaa/
}
