plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.appmattus.markdown' version '0.6.0'
    id 'groovy'
    id 'codenarc'
    id 'nebula.lint' version '16.9.1'
    id 'com.github.spotbugs' version '4.5.0'
    id 'pmd'
}

ext {
    javaVersion = JavaVersion.VERSION_11
    junitVersion = '5.6.2'
    checkstyleVersion = '8.35'
    codenarcVersion = '1.6.1'
    spotbugsVersion = '4.1.2'
    pmdVersion = '6.26.0'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    jcenter()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation 'org.assertj:assertj-core:3.17.1'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'sk.ivankohut.quantifa.Application'
        )
    }
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion checkstyleVersion
}

task checkstyleRoot(type: Checkstyle) {
    source = rootDir
    classpath = files()
    configFile = file('config/checkstyle/checkstyle-root.xml')
    exclude '**/build/**', '.idea/**', '**/.gradle/**', 'gradle/**', 'gradlew', 'gradlew.bat'
}

check {
    dependsOn checkstyleRoot
}

codenarc {
    toolVersion codenarcVersion
    codenarcMain.enabled = false
    codenarcTest.enabled = false
}

task codenarcGradle(type: CodeNarc) {
    compilationClasspath += buildscript.configurations.classpath
    configFile = file('config/codenarc/codenarc-gradle.groovy')
    source = rootDir
    include '*.gradle', 'config/codenarc/*.groovy'
    ignoreFailures false
    maxPriority1Violations 0
    maxPriority2Violations 0
    maxPriority3Violations 0
}

check {
    dependsOn codenarcGradle
}

gradleLint {
    alwaysRun = false
    criticalRules = ['all-dependency']
}

check {
    dependsOn criticalLintGradle
}

spotbugs {
    toolVersion = spotbugsVersion
    ignoreFailures = false
    effort = 'max'
}

pmd {
    toolVersion pmdVersion
    ignoreFailures = false
    consoleOutput = true
}

tasks.withType(Pmd) {
    include '**/*.java'
}

pmdTest {
    ruleSets = []
    ruleSetFiles = files('config/pmd/test-ruleset.xml')
}

pmdMain {
    ruleSets = []
    ruleSetFiles = files('config/pmd/main-ruleset.xml')
}
