plugins {
    id 'java'
    id 'application'
    id 'org.ajoberstar.grgit' version '4.0.2'
    id 'checkstyle'
    id 'com.appmattus.markdown' version '0.6.0'
    id 'codenarc'
    id 'nebula.lint' version '16.9.1'
    id 'com.github.spotbugs' version '4.5.0'
    id 'pmd'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
    id 'at.zierler.yamlvalidator' version '1.5.0'
    id 'com.github.ivankohut.git-branch-checks' version '0.0.2'
}

ext {
    javaVersion = JavaVersion.VERSION_15
    junitVersion = '5.6.2'
    checkstyleVersion = '8.38'
    codenarcVersion = '1.6.1'
    spotbugsVersion = '4.2.0'
    pmdVersion = '6.30.0'
    jacocoVersion = '0.8.6'
    lombokVersion = '1.18.10'
    twsApiZipUrl = 'https://interactivebrokers.github.io/downloads/twsapi_macunix.976.01.zip'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    jcenter()
}

sourceSets {
    acceptanceTest {
        java {
            srcDir 'src/acceptanceTest/java'
        }
    }
}

// Download TWS API jar which is not available in public maven repositories
def twsDir = new File("$buildDir/tws/")
def twsApiJar = new File("$twsDir/twsApi.jar")
twsDir.mkdirs()
if (!twsApiJar.exists()) {
    def twsApiZip = new File(twsDir, 'twsapi.zip')
    twsApiZip << new URL(twsApiZipUrl).bytes
    def unzippedDir = "$twsDir/unzipped"
    ant.unzip(src: twsApiZip, dest: unzippedDir, overwrite: 'true')
    twsApiJar << new File("$unzippedDir/IBJts/source/JavaClient/TwsApi.jar").bytes
}

dependencies {
    implementation files(twsApiJar)
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation 'org.cactoos:cactoos:0.48'
    implementation 'commons-io:commons-io:2.8.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation 'org.assertj:assertj-core:3.17.1'
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.mockito:mockito-core:3.6.0'

    acceptanceTestImplementation 'org.fitnesse:fitnesse:20201213'
    acceptanceTestImplementation sourceSets.main.compileClasspath
    acceptanceTestImplementation sourceSets.main.output
    acceptanceTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

gitBranchChecks {
    branchPattern = ~/(master)|(feature\/#\d+\/[a-z0-9\-]+)/
    messagePattern = ~/#\d+ [A-Z0-9]\S* \S.*/
}

check {
    dependsOn checkBranchName, checkCommitMessages, checkNoMergeCommits
}

jar {
    manifest {
        attributes(
                'Main-Class': 'sk.ivankohut.quantifa.Application'
        )
    }
}

jacoco {
    toolVersion jacocoVersion
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled false
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion checkstyleVersion
}

task checkstyleRoot(type: Checkstyle) {
    source = rootDir
    classpath = files()
    configFile = file('config/checkstyle/checkstyle-root.xml')
    exclude '**/build/**', '.idea/**', 'out/**', '**/.gradle/**', 'gradle/**', 'gradlew', 'gradlew.bat', '**/*.md',
            'src/acceptanceTest/specification/**/*.zip', 'src/acceptanceTest/specification/GradleClassPath.wiki'
}

check {
    dependsOn checkstyleRoot
}

codenarc {
    toolVersion codenarcVersion
}

task codenarcGradle(type: CodeNarc) {
    compilationClasspath += buildscript.configurations.classpath
    configFile = file('config/codenarc/codenarc-gradle.groovy')
    source = rootDir
    include '*.gradle', 'config/codenarc/*.groovy'
    ignoreFailures false
    maxPriority1Violations 0
    maxPriority2Violations 0
    maxPriority3Violations 0
}

check {
    dependsOn codenarcGradle
}

gradleLint {
    alwaysRun = false
    criticalRules = ['all-dependency']
}

check {
    dependsOn criticalLintGradle
}

spotbugs {
    toolVersion = spotbugsVersion
    ignoreFailures = false
    effort = 'max'
}

pmd {
    toolVersion pmdVersion
    ignoreFailures = false
    consoleOutput = true
}

tasks.withType(Pmd) {
    include '**/*.java'
}

def pmdConfigPath = 'config/pmd'

pmdTest {
    ruleSets = []
    ruleSetFiles = files("$pmdConfigPath/test-ruleset.xml")
}

pmdMain {
    ruleSets = []
    ruleSetFiles = files("$pmdConfigPath/main-ruleset.xml")
}

pmdAcceptanceTest {
    ruleSets = []
    ruleSetFiles = files("$pmdConfigPath/acceptanceTest-ruleset.xml")
}

tasks['check'].dependsOn('markdownlint')

sonarqube {
    properties {
        property 'sonar.projectKey', 'ivankohut_quantifa'
        property 'sonar.qualitygate.wait', true
        property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
        property 'sonar.coverage.exclusions', '**/Application.java'
    }
}

tasks['sonarqube'].dependsOn test

yamlValidator {
    searchPaths = ['.travis.yml']
}

task writeFitNesseClasspath (type: WriteFitNesseClasspath) {
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    pagePath = project.file('src/acceptanceTest/specification')
}

class WriteFitNesseClasspath extends DefaultTask {

    @Input
    FileCollection classpath

    @OutputDirectory
    File pagePath

    @TaskAction
    void generatePage() {
        def outputFile = project.file("${pagePath}/GradleClassPath.wiki")
        outputFile.createNewFile()
        outputFile.withWriter { writer ->
            project.sourceSets.main.output.classesDirs.forEach { classesDir -> writer.writeLine("!path ${classesDir}") }
            classpath.each { d ->
                writer.writeLine("!path $d")
            }
        }
    }

}
